@startuml CameraHardWare

package "CameraService Binder" {


class CameraService {
    -mNumberOfCameras : int
    -mCameraProviderManager 
}

class BinderService <CameraService> {
    +publish()
    +{static} instantiate()
}

class BnCameraService {

}

class BnInterface <ICameraService> {

}

class ICameraService {

}

class IInterface {

}

class HidlCameraService {

}

HidlCameraService --|> ICameraService

ICameraService --|> IInterface
IInterface --|> RefBase

BnCameraService --|> BnInterface

class IBinder {

}

class BBinder {

}

BnInterface --|> ICameraService
BnInterface --|> BBinder
BBinder --|> IBinder

class DeathRecipient {

}

class RefBase {
    +incStrong()
    +decStrong()
    +onFirstRef()
}

class StatusListener {

}

class IServiceNotification {

}

class IBase {

}

class sp <T> {
    -m_ptr : T*
    +sp()
    +~sp()
}

sp::sp -> RefBase::incStrong
' sp::~sp -> RefBase::decStrong

BinderService::instantiate -> BinderService::publish

IBase --|> RefBase
IBase <|-- IServiceNotification
StatusListener --|> RefBase

RefBase <|-- IBinder
IBinder *-- DeathRecipient


CameraService --|> BinderService
CameraService --|> DeathRecipient
CameraService --|> BnCameraService

}

package "CameraService-Provider" {

    class HardwareServiceInteractionProxy {
        +getService() : provider::V2_4::ICameraProvider
        +registerForNotifications()
        +{static} sHardwareServiceInteractionProxy
        --
        
    }
    
    class ServiceInteractionProxy {

    }

    class CameraProviderManager {
        -mServiceProxy : ServiceInteractionProxy
    }

    ServiceInteractionProxy <|-- HardwareServiceInteractionProxy
    CameraService::mCameraProviderManager <-- CameraProviderManager
    CameraProviderManager *-- StatusListener
    IServiceNotification <|-- CameraProviderManager
    CameraProviderManager::sHardwareServiceInteractionProxy <-- HardwareServiceInteractionProxy

    class CameraDeviceClient {

    }

    class Camera2ClientBase <TClientBase> {
        #mDevice : const sp<CameraDeviceBase>
    }

    class CameraDeviceClientBase {
        
    }

    class BasicClient {

    }

    class BnCameraDeviceUser {

    }

    class NotificationListener {

    }

    class FilteredListener {

    }

    class FrameProcessorBase {

    }

    class Thread {

    }

    BasicClient --|> RefBase
    CameraDeviceClientBase --|> BasicClient
    CameraDeviceClientBase --|> BnCameraDeviceUser
    FrameProcessorBase --|> Thread
    FilteredListener --|> FrameProcessorBase
    CameraDeviceClient --|> Camera2ClientBase
    CameraDeviceClient --|> FilteredListener
    Camera2ClientBase --|> CameraDeviceClientBase
    Camera2ClientBase --|> NotificationListener

    class Camera3Device {
        -mBufferManager
        -mId : CamerId
    }

    class ICameraDeviceCallback {

    }

    class SetErrorInterface {

    }

    class InflightRequestUpdateInterface {

    }

    class RequestBufferInterface {

    }

    class FlushBufferInterface {

    }

    class Camera3BufferManager {

    }

    class OutputConfiguration {
        -std::vector<sp<IGraphicBufferProducer>> mGbps
    }

    class Parcelable {}


    ICameraDeviceCallback --|> IBase
    Camera3BufferManager --|> RefBase

    Camera3Device --|> CameraDeviceBase
    Camera3Device --|> ICameraDeviceCallback
    Camera3Device --|> SetErrorInterface
    Camera3Device --|> InflightRequestUpdateInterface
    Camera3Device --|> RequestBufferInterface
    Camera3Device --|> FlushBufferInterface
    Camera3Device::mBufferManager <-- Camera3BufferManager
    OutputConfiguration --> CameraDeviceClient
}

@enduml